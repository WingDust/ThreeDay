{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n\nThis error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can happen in several cases, the most common being a mismatch\nbetween the type that the compiler inferred for a variable based on its\ninitializing expression, on the one hand, and the type the author explicitly\nassigned to the variable, on the other hand.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\Administrator\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\lib/rustlib/src/rust\\src\\libstd\\macros.rs","byte_start":2904,"byte_end":2974,"line_start":96,"line_end":98,"column_start":23,"column_end":6,"is_primary":true,"text":[{"text":"    ($($arg:tt)*) => ({","highlight_start":23,"highlight_end":24},{"text":"        $crate::io::_print($crate::format_args_nl!($($arg)*));","highlight_start":1,"highlight_end":63},{"text":"    })","highlight_start":1,"highlight_end":6}],"label":"expected enum `std::result::Result`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\main.rs","byte_start":698,"byte_end":736,"line_start":25,"line_end":25,"column_start":32,"column_end":70,"is_primary":false,"text":[{"text":"        REG_CREATED_NEW_KEY => println!(\"A new key has been created\"),","highlight_start":32,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"C:\\Users\\Administrator\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\lib/rustlib/src/rust\\src\\libstd\\macros.rs","byte_start":2825,"byte_end":2977,"line_start":94,"line_end":99,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! println {","highlight_start":1,"highlight_end":1},{"text":"    () => ($crate::print!(\"\\n\"));","highlight_start":1,"highlight_end":1},{"text":"    ($($arg:tt)*) => ({","highlight_start":1,"highlight_end":1},{"text":"        $crate::io::_print($crate::format_args_nl!($($arg)*));","highlight_start":1,"highlight_end":1},{"text":"    })","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"  expected enum `std::result::Result<(), std::io::Error>`\nfound unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:25:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        REG_CREATED_NEW_KEY => println!(\"A new key has been created\"),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `std::result::Result`, found `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m:   expected enum `\u001b[0m\u001b[0m\u001b[1mstd::result::Result<(), std::io::Error>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m           found unit type `\u001b[0m\u001b[0m\u001b[1m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n\nThis error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can happen in several cases, the most common being a mismatch\nbetween the type that the compiler inferred for a variable based on its\ninitializing expression, on the one hand, and the type the author explicitly\nassigned to the variable, on the other hand.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\Administrator\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\lib/rustlib/src/rust\\src\\libstd\\macros.rs","byte_start":2904,"byte_end":2974,"line_start":96,"line_end":98,"column_start":23,"column_end":6,"is_primary":true,"text":[{"text":"    ($($arg:tt)*) => ({","highlight_start":23,"highlight_end":24},{"text":"        $crate::io::_print($crate::format_args_nl!($($arg)*));","highlight_start":1,"highlight_end":63},{"text":"    })","highlight_start":1,"highlight_end":6}],"label":"expected enum `std::result::Result`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\main.rs","byte_start":773,"byte_end":816,"line_start":26,"line_end":26,"column_start":36,"column_end":79,"is_primary":false,"text":[{"text":"        REG_OPENED_EXISTING_KEY => println!(\"An existing key has been opened\"),","highlight_start":36,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"C:\\Users\\Administrator\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\lib/rustlib/src/rust\\src\\libstd\\macros.rs","byte_start":2825,"byte_end":2977,"line_start":94,"line_end":99,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! println {","highlight_start":1,"highlight_end":23},{"text":"    () => ($crate::print!(\"\\n\"));","highlight_start":1,"highlight_end":34},{"text":"    ($($arg:tt)*) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::io::_print($crate::format_args_nl!($($arg)*));","highlight_start":1,"highlight_end":63},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"  expected enum `std::result::Result<(), std::io::Error>`\nfound unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:26:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        REG_OPENED_EXISTING_KEY => println!(\"An existing key has been opened\"),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `std::result::Result`, found `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m:   expected enum `\u001b[0m\u001b[0m\u001b[1mstd::result::Result<(), std::io::Error>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m           found unit type `\u001b[0m\u001b[0m\u001b[1m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
